// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow to provide actionable insights by analyzing key metrics and identifying anomalies.
 *
 * - getActionableInsights - A function that retrieves actionable insights for the admin dashboard.
 * - ActionableInsightsInput - The input type for the getActionableInsights function (currently empty).
 * - ActionableInsightsOutput - The return type for the getActionableInsights function, containing the insights.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ActionableInsightsInputSchema = z.object({});
export type ActionableInsightsInput = z.infer<typeof ActionableInsightsInputSchema>;

const ActionableInsightsOutputSchema = z.object({
  insights: z.array(
    z.object({
      metric: z.string().describe('The name of the metric.'),
      value: z.number().describe('The current value of the metric.'),
      normativeRange: z
        .object({
          min: z.number().describe('The minimum expected value.'),
          max: z.number().describe('The maximum expected value.'),
        })
        .optional()
        .describe('The normative range for the metric, if applicable.'),
      isOutlier: z.boolean().describe('Whether the metric is outside the normative range.'),
      explanation: z.string().describe('An explanation of why the metric is an outlier and potential actions to take.'),
    })
  ).describe('A list of actionable insights.'),
});
export type ActionableInsightsOutput = z.infer<typeof ActionableInsightsOutputSchema>;

export async function getActionableInsights(
  input: ActionableInsightsInput
): Promise<ActionableInsightsOutput> {
  return actionableInsightsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'actionableInsightsPrompt',
  input: {schema: ActionableInsightsInputSchema},
  output: {schema: ActionableInsightsOutputSchema},
  prompt: `You are an AI assistant that analyzes key metrics related to user activity, project completions, and help desk responsiveness.

  Your goal is to identify areas where performance falls outside of norms for similar regions or projects, and provide actionable insights to the administrator.

  Analyze the following metrics and identify any outliers:

  - Total Users: Current number of active users on the platform.
  - Project Completion Rate: Percentage of projects completed within the expected timeframe.
  - Help Desk Response Time: Average time taken to respond to help desk tickets.
  - User Activity Level: Average daily engagement of users on the platform.

  Consider factors such as regional differences, project types, and historical data when determining what constitutes a "norm".

  For each outlier, provide an explanation of why it is an outlier and suggest potential actions to take to address the issue.

  Return the insights in the following JSON format:
  {{outputSchemaDescription}}`,
});

const actionableInsightsFlow = ai.defineFlow(
  {
    name: 'actionableInsightsFlow',
    inputSchema: ActionableInsightsInputSchema,
    outputSchema: ActionableInsightsOutputSchema,
  },
  async input => {
    // In a real application, you would fetch the actual metrics from your database or analytics system here.
    // For this example, we'll use placeholder data.
    const placeholderMetrics = {
      totalUsers: 1500,
      projectCompletionRate: 0.75,
      helpDeskResponseTime: 24, // hours
      userActivityLevel: 0.8,
    };

    const {output} = await prompt(input);
    return output!;
  }
);

